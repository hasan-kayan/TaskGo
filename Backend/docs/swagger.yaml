basePath: /
definitions:
  models.Book:
    properties:
      author:
        type: string
      cover_image_url:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      id:
        type: string
      isbn:
        type: string
      pages:
        minimum: 0
        type: integer
      publisher:
        type: string
      title:
        type: string
      type:
        type: string
      updated_at:
        type: string
      year:
        minimum: 0
        type: integer
    required:
    - author
    - title
    type: object
  models.ErrorResponse:
    properties:
      error:
        description: |-
          Error message
          example: Book not found
        type: string
    type: object
  models.MessageResponse:
    properties:
      message:
        description: |-
          Message text
          example: Book deleted
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API for managing books and processing URLs
  title: TaskGo API
  version: "1.0"
paths:
  /books:
    get:
      description: Returns books, optionally filtered by title, author, year, or type
      parameters:
      - description: Filter by title (substring)
        in: query
        name: title
        type: string
      - description: Filter by author (substring)
        in: query
        name: author
        type: string
      - description: Filter by publication year
        in: query
        name: year
        type: integer
      - description: Filter by genre/type
        in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Retrieve all books (with optional filters)
      tags:
      - books
    post:
      consumes:
      - application/json
      description: Add a new book to the library
      parameters:
      - description: Book to create
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/models.Book'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Book'
        "400":
          description: Bind error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "422":
          description: Validation error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a new book
      tags:
      - books
  /books/{id}:
    delete:
      description: Remove a book by UUID
      parameters:
      - description: Book UUID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "400":
          description: Invalid UUID
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Book not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete a book
      tags:
      - books
    get:
      description: Retrieves a book using its UUID
      parameters:
      - description: Book UUID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Book'
        "400":
          description: Invalid UUID
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Book not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get a book by ID
      tags:
      - books
    put:
      consumes:
      - application/json
      description: Update a book by UUID
      parameters:
      - description: Book UUID
        in: path
        name: id
        required: true
        type: string
      - description: Updated book data
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/models.Book'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Book'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update an existing book
      tags:
      - books
  /health:
    get:
      description: Returns 200 OK if the service is up
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Health Check
      tags:
      - Health
swagger: "2.0"
