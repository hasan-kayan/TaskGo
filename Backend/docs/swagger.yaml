basePath: /
definitions:
  models.Book:
    properties:
      author:
        description: |-
          Author of the book.

          required: true
          example: J.R.R. Tolkien
        type: string
      created_at:
        description: |-
          CreatedAt is the timestamp when the book was added.

          example: 2025-06-12T10:30:00Z
        type: string
      deleted_at:
        description: |-
          DeletedAt is the timestamp when the book was deleted (if soft-deleted).

          example: null
        type: string
      id:
        description: |-
          ID is the unique identifier for the book.

          required: true
          example: 1
        type: integer
      title:
        description: |-
          Title of the book.

          required: true
          example: The Hobbit
        type: string
      updated_at:
        description: |-
          UpdatedAt is the timestamp when the book was last updated.

          example: 2025-06-12T10:30:00Z
        type: string
      year:
        description: |-
          Year of publication.

          example: 1937
        type: integer
    required:
    - author
    - title
    type: object
  models.ErrorResponse:
    properties:
      error:
        description: |-
          Error message
          example: Book not found
        type: string
    type: object
  models.MessageResponse:
    properties:
      message:
        description: |-
          Message text
          example: Book deleted
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@example.com
    name: API Support
    url: http://example.com/support
  description: This is the API for TaskGo, a task management application.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://example.com/terms/
  title: TaskGo API
  version: "1.0"
paths:
  /books:
    get:
      description: Get a list of all books from the database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Book'
            type: array
      summary: Retrieve all books
      tags:
      - books
    post:
      consumes:
      - application/json
      description: Add a new book to the library
      parameters:
      - description: Book to create
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/models.Book'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Book'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a new book
      tags:
      - books
  /books/{id}:
    delete:
      description: Remove a book by ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete a book
      tags:
      - books
    get:
      description: Retrieves a book from the database using its ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Book'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get a book by ID
      tags:
      - books
    put:
      consumes:
      - application/json
      description: Update a book by ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated book data
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/models.Book'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Book'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update an existing book
      tags:
      - books
swagger: "2.0"
